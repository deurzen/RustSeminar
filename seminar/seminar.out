\BOOKMARK [1][-]{section.1}{Introduction}{}% 1
\BOOKMARK [1][-]{section.2}{External Dependency Management}{}% 2
\BOOKMARK [2][-]{subsection.2.1}{C++: Ad Hoc Dependency Management}{section.2}% 3
\BOOKMARK [2][-]{subsection.2.2}{Rust: Automated Dependency Management using Cargo}{section.2}% 4
\BOOKMARK [2][-]{subsection.2.3}{Rust: Decoupling External Dependencies using Traits}{section.2}% 5
\BOOKMARK [2][-]{subsection.2.4}{C++: Abstraction through Abstract Classes}{section.2}% 6
\BOOKMARK [2][-]{subsection.2.5}{External Dependency Management: Remarks}{section.2}% 7
\BOOKMARK [1][-]{section.3}{Main Event Loop}{}% 8
\BOOKMARK [2][-]{subsection.3.1}{Rust and C++: Windowing System Event Decoupling}{section.3}% 9
\BOOKMARK [2][-]{subsection.3.2}{Rust: Internal Event Structuring using Enumerations}{section.3}% 10
\BOOKMARK [2][-]{subsection.3.3}{C++: Internal Event Encoding with std::variant}{section.3}% 11
\BOOKMARK [2][-]{subsection.3.4}{Internal Events: Remarks}{section.3}% 12
\BOOKMARK [2][-]{subsection.3.5}{Rust: Event Dispatch through Pattern Matching}{section.3}% 13
\BOOKMARK [2][-]{subsection.3.6}{C++: Delegation by Visiting std::variant Alternatives}{section.3}% 14
\BOOKMARK [2][-]{subsection.3.7}{Event Dispatch: Remarks}{section.3}% 15
\BOOKMARK [1][-]{section.4}{Input Bindings}{}% 16
\BOOKMARK [2][-]{subsection.4.1}{Rust: Storing and Retrieving Callable Objects}{section.4}% 17
\BOOKMARK [2][-]{subsection.4.2}{C++: Bindings with std::function and std::unordered\137map}{section.4}% 18
\BOOKMARK [2][-]{subsection.4.3}{Input Bindings: Remarks}{section.4}% 19
\BOOKMARK [1][-]{section.5}{Clients}{}% 20
\BOOKMARK [2][-]{subsection.5.1}{Rust: Mutable State with Cell and RefCell}{section.5}% 21
\BOOKMARK [2][-]{subsection.5.2}{C++: Implicit interior mutability with references}{section.5}% 22
\BOOKMARK [2][-]{subsection.5.3}{Clients: Remarks}{section.5}% 23
\BOOKMARK [1][-]{section.6}{Conclusion}{}% 24
\BOOKMARK [1][-]{section*.2}{Appendix A: Collision in header guards}{}% 25
