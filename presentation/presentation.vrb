\frametitle{\underline {\cpp }: Event Abstraction with std::variant \hfill {\footnotesize \currentname }}

    \tbf{2. Create windowing system agnostic event \underline{\texttt{std::variant}}}

    \begin{itemize}

        \item Definition of a type by \textit{enumerating} its \textit{alternatives}

        \item Type-safe tagged union class template

        \item Encodes \textit{meaning}

        \item Contains \textit{data}
            \begin{itemize}
                \item Data can only \textit{indirectly} be associated with an alternative
                \item Strong type alias required for same-type alternatives
            \end{itemize}

        \item Size as large as its largest variant

        \item Example: \textsc{wmRS}'s \rsin{Event} enumeration:\\
\begin{minipage}[t]{.45\linewidth}
\begin{minted}[fontsize=\scriptsize]{cpp}
  typedef std::variant<
      std::monostate,
      Mouse,
      Key,
      CloseRequest,
      ScreenChange,
      // ...
  > Event;
\end{minted}
\end{minipage}%
\begin{minipage}[t]{.45\linewidth}
\begin{minted}[fontsize=\scriptsize]{cpp}
  struct Mouse { MouseEvent event; };
\end{minted}
\begin{minted}[fontsize=\scriptsize]{cpp}
  struct Key { KeyEvent event; };
\end{minted}
\begin{minted}[fontsize=\scriptsize]{cpp}
  struct CloseRequest { Window window; };
\end{minted}
\begin{minted}[fontsize=\scriptsize]{cpp}
  struct ScreenChange {};
\end{minted}
\begin{minted}[fontsize=\scriptsize]{cpp}
  // ...
\end{minted}
\end{minipage}

    \end{itemize}

    \vfill

